# Alma Design System — MANIFEST.yaml
# Prototype UI Kit & design system infrastructure

project:
  name: Alma Design System
  type: design-system
  description: >
    Experimental design system platform unifying components, tokens, fonts, icons,
    and utilities into a single code-driven environment with Figma integration.

structure:
  adapters: environment-specific wrappers for components
  assets: base resources (fonts, icons, animations, SCSS core)
  components: Vue components (atoms, molecules, organisms, templates)
  composables: Vue composables (global and local hooks)
  constants: UI constants
  stores: Pinia stores for shared state experiments
  stories: Storybook stories (components, tokens, pages)
  tokens: design tokens source (JSON) and generated outputs (JSON/CSS vars)
  typings: TypeScript types (UI, API, router, etc.)
  utils: helper utilities (units, events, sanitization, testing)
  tests: Vitest fixtures, DOM helpers, setup
  styles:
    _index.scss: Storybook SCSS bundle entry
    app.runtime.scss: consumer-facing runtime stylesheet
  manifest:
    - MANIFEST.yaml (machine-readable specification)
    - MANIFEST.md (human-readable documentation)

modules:
  adapters:
    description: Thin wrappers bridging base Vue components into environments
    categories:
      atoms: atomic components (button, input, icon, etc.)
      molecules: composed elements (forms, dropdown, snackbar)
      organisms: environment-specific blocks (editor, navigation)
      templates: high-level layout wrappers (headers, footers, menus)

  assets:
    animations: JSON animations (spinner, theme toggle)
    fonts: >
      Bundled Manrope font (Cyrillic + Latin, weights 200–800),
      offline-first but replaceable with CDN
    icons: AlmaIcons entry point (index.ts)
    scss:
      abstracts: tokens, base colors, breakpoints, themes
      core: mixins & functions (px2rem, themify, map-get)
      extends: animations, containers, component styles
      mixins: reusable mixins
      app: runtime/global entry points (app.*.scss)
    images: static imagery for docs and Storybook

  components:
    implementation: ".vue + .ts"
    typings: "Props & contracts exported from colocated .ts files"
    tests: "Unit tests in .spec.ts"
    stories: "Storybook coverage in .stories.ts[x]"
    categories:
      atoms: buttons, icons, inputs, typography, tooltips
      molecules: dropdowns, forms, snackbar
      organisms: navigation, editor, complex layouts
      templates: headers, footers, menus
    exports: aggregated via components/index.ts

  composables:
    global: theme, meta, connection state
    local:
      - hover
      - clickOutside
      - drag-and-drop
      - seo
      - router
      - timers
      - storage

  constants:
    app: application-wide defaults and flags
    config: runtime configuration maps
    ui: UI primitives (themes, modes, breakpoints)

  stores:
    library: Pinia
    entries:
      - useConnectionStore
    purpose: share lightweight state across component experiments

  tokens:
    src:
      _colors.json: master palette contracts
      baseColors.json: canonical base palette
      breakpoints.json: responsive breakpoints
      colors.json: resolved relational color map
      components: per-component tokens (atoms, molecules, organisms, templates)
      config.json: token pipeline configuration
      themes: light, dark, and experimental themes
      typography: text styles and type scale
      tokens: spacing, stroke, roundness, gap, touchArea
    build:
      source: packages/design-system/src/tokens/src
      outputs:
        - packages/design-system/src/tokens/output/*.json
      status: generated-only, excluded from manual edits
    docs: structure.md
    figma:
      forward: Code → Figma (fully supported)
      philosophy: Code-first, tokens are the single source of truth

  stories:
    components: atomic/molecular UI demos
    decorators: Storybook global wrappers
    pages: theme & token showcases
    utils: helpers for story organization

  utils:
    - px2rem
    - getPathSegment
    - event helpers
    - sanitize
    - gsapSafe (guards animation imports)

  typings:
    - ui
    - api
    - router
    - localization
    - themes
    - declarations (.d.ts)

  tests:
    location: __tests__/
    tooling:
      runner: Vitest
      environment: jsdom
      setup: vitest.setup.ts

rules:
  - tokens/output excluded from manual edits (generated)
  - fonts shipped offline-first
  - each component must include .vue + .ts + .spec.ts
  - adapters must remain thin wrappers, no heavy UI logic
  - temporary experiments live under **/*.temp/ and are ignored by git

tooling:
  tokens_worker:
    package: "@alma/tokens-worker"
    location: packages/tokens-worker
    role: compile token sources into runtime outputs
    inputs: packages/design-system/src/tokens/src
    outputs: packages/design-system/src/tokens/output

summary:
  keywords:
    - assets
    - tokens
    - components
    - adapters
    - composables
    - utils
    - stores
    - storybook
    - tokens-worker
  philosophy: >
    Alma Design System is not a production library but an experimental R&D platform,
    where tokens and code are the single source of truth.
