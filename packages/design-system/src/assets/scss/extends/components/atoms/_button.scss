@use "../../../abstracts/index" as *;
@use "../../../core/index" as *;
@use "../../components/atoms/typography" as *;
@use "../../../mixins/transitions" as *;

$tokenName: "button";
$prefix: getPrefix($tokenName);

@mixin defineButtonSizes(
  $prefix: $prefix,
  $tokenName: $tokenName,
  $map: get($components, "atoms.#{$tokenName}")
) {
  @each $variant, $sizes in $map {
    @each $size, $val in $sizes {
      $button-size: px2rem(get($val, "root.size"));
      $gap: px2rem(get($val, "root.gap"));
      $border-radius: get($val, "root.border-radius");
      $padding: get($val, "root.padding");

      $font-style: get($val, "label.font-style");
      $icon-size: px2rem(get($val, "icon.size"));

      &_variant-#{$variant} {
        &.#{$prefix}_size-#{$size} {
          // %button_variant-#{$variant}_size-#{$size}
          gap: $gap;
          height: $button-size;
          min-height: $button-size;
          border-radius: $border-radius;

          &.#{$prefix}_variant-default {
            padding: $padding;
          }

          &.#{$prefix}_variant-rounded,
          &.#{$prefix}_variant-squared {
            width: $button-size !important;
          }

          .#{$prefix}__label {
            @extend %t__#{$font-style};
            line-height: 1;
          }
        }
      }
    }
  }
}

@mixin defineButtonThemes(
  $prefix: $prefix,
  $tokenName: $tokenName,
  $map: get($themes, "light.components.atoms.#{$tokenName}")
) {
  @each $mode, $modes in $map {
    @each $tone, $val in $modes {
      &_mode-#{$mode} {
        &.#{$prefix}_tone-#{$tone} {
          // %button_mode-#{$tone}_tone-#{$mode}
          @include themify($themes) {
            color: themed(
              "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.normal"
            );
            fill: themed(
              "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.normal"
            );
            background-color: themed(
              "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.background.normal"
            );
            border: get($tokens, "outline") solid
              themed(
                "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.border.normal"
              );
          }
          @include useThemeTransition();

          &:focus {
            @include themify($themes) {
              outline: get($tokens, "outline") solid
                themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.border.highlight"
                );
            }
          }

          &.button_hovered {
            @include themify($themes) {
              background-color: themed(
                "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.background.hovered"
              );
              border: get($tokens, "outline") solid
                themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.border.hovered"
                );
            }

            .button__label {
              @include themify($themes) {
                color: themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.hovered"
                );
                fill: themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.hovered"
                );
              }
            }
          }

          &.button_pressed {
            @include themify($themes) {
              background-color: themed(
                "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.background.pressed"
              );
              border: get($tokens, "outline") solid
                themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.border.pressed"
                );
            }

            .button__label {
              @include themify($themes) {
                color: themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.pressed"
                );
                fill: themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.pressed"
                );
              }
            }
          }

          &.button_disabled {
            @include themify($themes) {
              background-color: themed(
                "components.atoms.button.#{$mode}.#{$tone}.root.background.disabled"
              );
              border: get($tokens, "outline") solid
                themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.root.border.disabled"
                );
            }

            .button__label {
              @include themify($themes) {
                color: themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.disabled"
                );
                fill: themed(
                  "components.atoms.#{$tokenName}.#{$mode}.#{$tone}.label.disabled"
                );
              }
            }
          }
        }
      }
    }
  }
}

// %button_variant-#{$variant}_size-#{$size}
// For expample: %button_variant-rounded_size-md
%button {
  @include defineButtonSizes();
}

// Usage %button_tone-#{$tone}_mode-#{$mode}
// For example: %button_tone-acccent_mode-primary
%button {
  @include defineButtonThemes();
}
