@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "sass:meta";

@function str-split($string, $delimiter: ".") {
  $result: ();
  $current: "";
  $length: string.length($string);

  @for $i from 1 through $length {
    $char: string.slice($string, $i, $i);

    @if $char == $delimiter {
      $result: list.append($result, $current);
      $current: "";
    } @else {
      $current: "#{$current}#{$char}";
    }
  }

  @return list.append($result, $current);
}

@function get($map, $path) {
  $keys: str-split($path, ".");
  $value: $map;
  $traversed: ""; // accumulated path up to current parent

  @each $key in $keys {
    $parent: $value;
    $traversed-parent: $traversed;

    // Verify current value is a map before accessing a child key
    @if meta.type-of($parent) != "map" {
      @error "utils.get(): Cannot access key `#{$key}` at path `#{$traversed-parent}` because value is of type `#{meta.type-of($parent)}`. Full path attempted: `#{$path}`.";
    }

    $next: map.get($parent, $key);

    @if $next == null {
      $available: map.keys($parent);
      @error "utils.get(): Key `#{$key}` not found at `#{$traversed-parent}`. Full path: `#{$path}`. Available keys here: #{$available}.";
    }

    // advance
    $value: $next;
    $traversed: if($traversed == "", "#{$key}", "#{$traversed}.#{$key}");
  }

  @return $value;
}
