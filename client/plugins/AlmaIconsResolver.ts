// Portions of this file were developed with the assistance of AI tools (ChatGPT).

import fs from "fs";
import path from "path";
import { Plugin } from "vite";

export interface AlmaIconsResolverOptions {
  source: string;
  entryFilePath: string;
}

export class AlmaIconsResolver {
  private source: string;
  private entryFilePath: string;

  constructor(options: AlmaIconsResolverOptions) {
    this.source = options.source;
    this.entryFilePath = options.entryFilePath;
  }

  private walkDir(dir: string, filelist: string[] = []): string[] {
    const files = fs.readdirSync(dir);
    files.forEach((file) => {
      const filepath = path.join(dir, file);
      const stat = fs.statSync(filepath);
      if (stat.isDirectory()) {
        this.walkDir(filepath, filelist);
      } else if (file.endsWith(".svg")) {
        filelist.push(filepath);
      }
    });
    return filelist;
  }

  private parseFilename(filename: string) {
    // пример: back_outline_100.svg
    const base = path.basename(filename, ".svg");
    if (base.includes("copy")) return null;

    const parts = base.split("_");
    if (parts.length < 3) return null;

    const name = parts[0];
    const style = parts[1];
    const weight = parts[2];

    return { name, style, weight };
  }

  public generate() {
    const files = this.walkDir(this.source);

    const names = new Set<string>();
    const styles = new Set<string>();
    const weights = new Set<string>();

    files.forEach((file) => {
      const parsed = this.parseFilename(file);
      if (!parsed) return;
      names.add(parsed.name);
      styles.add(parsed.style);
      weights.add(parsed.weight);
    });

    const content = `// AUTO-GENERATED by AlmaIconsResolver
export const iconNames = ${JSON.stringify([...names], null, 2)};
export const iconStyles = ${JSON.stringify([...styles], null, 2)};
export const iconWeights = ${JSON.stringify([...weights], null, 2)};
`;

    fs.mkdirSync(path.dirname(this.entryFilePath), { recursive: true });
    fs.writeFileSync(this.entryFilePath, content, "utf-8");
  }
}
